% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mainAnnotator_SVMerge_Trio.r
\name{nanotatoR_SVmerge_Trio}
\alias{nanotatoR_SVmerge_Trio}
\title{Annotation and visualisation of Bionano SV, of DLE Trio samples.}
\usage{
nanotatoR_SVmerge_Trio(
  smap,
  bed,
  inputfmtBed = c("bed", "BNBed"),
  n = 3,
  buildBNInternalDB = TRUE,
  mergedFiles,
  smappath,
  buildSVInternalDB = FALSE,
  path,
  pattern,
  win_indel_INF = 10000,
  win_inv_trans_INF = 50000,
  perc_similarity_INF = 0.5,
  indelconf = 0.5,
  invconf = 0.01,
  transconf = 0.1,
  perc_similarity_INF_parents = 0.9,
  hgpath,
  win_indel_DGV = 10000,
  win_inv_trans_DGV = 50000,
  perc_similarity_DGV = 0.5,
  method_entrez = c("Single", "Multiple", "Text"),
  termPath,
  term,
  thresh = 5,
  limsize = 1000,
  EnzymeType = c("SVmerge", "SE"),
  labelType = c("SVMerge", "SE", "Both"),
  SVMerge_path,
  SVMerge_pattern,
  SE_path,
  SE_pattern,
  Samplecodes,
  mergeKey,
  mergedKeyoutpath,
  mergedKeyFname,
  RNAseqcombo = TRUE,
  RNASeqDir,
  returnMethod = "dataFrame",
  RNASeqData,
  RNASeqPATH,
  pattern_Proband = NA,
  pattern_Mother = NA,
  pattern_Father = NA,
  outpath,
  outputFilename = "",
  termListPresent = TRUE,
  internalBNDB,
  clinvar,
  InternaldatabasePresent = TRUE,
  RNASeqDatasetPresent = TRUE,
  geneListPresent = TRUE,
  omim,
  gtr,
  removeClinvar = FALSE,
  removeGTR = FALSE,
  downloadClinvar = FALSE,
  downloadGTR = FALSE,
  url_gtr,
  omimID,
  RZIPpath,
  directoryName,
  fileprefix,
  datGeneListPath,
  decipherpath,
  indexfile,
  primaryGenesPresent = TRUE,
  outputType = c("Excel", "csv")
)
}
\arguments{
\item{smap}{character. File name for the smap}

\item{bed}{Text Bionano Bed file.}

\item{inputfmtBed}{character Whether the bed input is UCSC bed or Bionano bed.}

\item{n}{numeric Number of genes to report which are nearest to the breakpoint.
Default is      3.}

\item{buildBNInternalDB}{boolean. Checking whether the merged BNDB 
file database exist.}

\item{mergedFiles}{character. Path to the merged SV files.}

\item{smappath}{character. Path and file name for textfile.}

\item{buildSVInternalDB}{boolean. Checking whether the merged solo 
file database exist.}

\item{path}{character. Path to the solo file database.}

\item{pattern}{character. pattern of the file names to merge.}

\item{win_indel_INF}{Numeric. Insertion and deletion error window.}

\item{win_inv_trans_INF}{Numeric. Inversion and translocation error window.}

\item{perc_similarity_INF}{Numeric . ThresholdPercentage similarity 
of the query SV and reference SV.}

\item{indelconf}{Numeric. Threshold for insertion and deletion confidence.}

\item{invconf}{Numeric. Threshold for inversion confidence.}

\item{transconf}{Numeric. Threshold for translocation confidence.}

\item{perc_similarity_INF_parents}{Numeric . ThresholdPercentage similarity 
for parent zygosity calculation. Default threshold 0.9.}

\item{hgpath}{character. Path to Database of Genomic Variants (DGV)
Text file.}

\item{win_indel_DGV}{Numeric. Insertion and deletion error window for DGV.}

\item{win_inv_trans_DGV}{Numeric. Inversion and translocation error window
for DGV.}

\item{perc_similarity_DGV}{Numeric . ThresholdPercentage similarity 
of the query SV and reference SV, for DGV..}

\item{method_entrez}{character. Input Method for terms. Choices are 
"Single","Multiple" and "Text".}

\item{termPath}{character. Path and file name for textfile.}

\item{term}{character. Single or Multiple Terms.}

\item{thresh}{integer. Threshold for the number of terms sent to entrez.
Note if large lists are sent to ncbi, it might fail to get
processed. Default is 5.}

\item{limsize}{Numeric. Minimum size for SV. Default 1000.}

\item{EnzymeType}{Character. Type of enzyme. Options Dual and DLE.}

\item{labelType}{character. Type of labels used for mapping. 
Choices are Dual, DLE and Both.}

\item{SVMerge_path}{character. Path for the Dual labelled cmap}

\item{SVMerge_pattern}{character. pattern of the dual files.}

\item{SE_path}{character. Path for the Dual labelled cmap}

\item{SE_pattern}{character. pattern of the dual files.}

\item{Samplecodes}{character. File containing relations and IDs 
associated to them.}

\item{mergeKey}{character. File containing sample ID and relation.}

\item{mergedKeyoutpath}{character. File path storing sample name and nanoID
key information.}

\item{mergedKeyFname}{character. File name storing sample name and nanoID
key information.}

\item{RNAseqcombo}{boolean whether RNASeq datasets are combined or not.}

\item{RNASeqDir}{boolean Directory for RNASeq.}

\item{returnMethod}{character. Choice between text or data frame as the output.}

\item{RNASeqData}{dataFrame. RNAseq data with gene names.}

\item{RNASeqPATH}{character. RNAseq dataset path .}

\item{pattern_Proband}{character. Pattern for proband.}

\item{pattern_Mother}{character. Pattern to identify the mother reads.}

\item{pattern_Father}{character. Pattern to identify the father reads.}

\item{outpath}{Character Directory to the output file.}

\item{outputFilename}{Character Output filename.}

\item{termListPresent}{logical Checks whether term list is provided by the user.}

\item{internalBNDB}{character. internak Bionano merged databse.}

\item{clinvar}{character. clinvar file name and location.}

\item{InternaldatabasePresent}{boolean. Checking whether
internal DB present.}

\item{RNASeqDatasetPresent}{boolean. Checking whether
RNASeq database present or not.}

\item{geneListPresent}{logical Checks whether gene list is provided by the user.}

\item{omim}{character. omim2gene file name and location.}

\item{gtr}{character. gtr file name and location.}

\item{removeClinvar}{logical. Deletes the Clinvar database if TRUE.}

\item{removeGTR}{logical. Deletes the GTR database if TRUE.}

\item{downloadClinvar}{logical. Downloads the Clinvar database if TRUE.}

\item{downloadGTR}{logical. Downloads the GTR database if TRUE.}

\item{url_gtr}{character. url for GTR.}

\item{omimID}{character. Omim ID.}

\item{RZIPpath}{character. Path to RZippath.}

\item{directoryName}{Directory name where individual SV files will be stored.}

\item{fileprefix}{character Prefix to use for each of the files in the directory.}

\item{datGeneListPath}{Character Path for genelist.}

\item{decipherpath}{character. Decipher database path.}

\item{indexfile}{character. indexfile containing nano ID 
and sample relation.}

\item{primaryGenesPresent}{logical Checks whether 
primarygene list is provided by the user.}

\item{outputType}{Variants in excel tabs or in different csv files.
Options Excel or csv.}
}
\value{
Excel file containing the annotated SV map, tabs divided based on
type of SVs.

Text files containg gene list and terms associated with them
        are stored as text files.
}
\description{
Annotation and visualisation of Bionano SV, of DLE Trio samples.
}
\examples{
\dontrun{
smapName="NA12878_Q.S_VAP_SVmerge_solo5.txt"
smap = system.file("extdata", smapName, package="nanotatoR")
bedFile <- system.file("extdata", "HomoSapienGRCH19_lift37.bed", package="nanotatoR")
hgpath=system.file("extdata", "GRCh37_hg19_variants_2016-05-15.txt", package="nanotatoR")
labelType = c("SE")
SE_path = system.file("extdata", "SoloFile/", package="nanotatoR")
SE_pattern = "*_DLE1_*"
Samplecodes = system.file("extdata", "nanotatoR_sample_codes.csv", package="nanotatoR")
mergeKey = system.file("extdata", "nanotatoR_control_sample_codes.csv", package="nanotatoR")
mergedKeyoutpath = system.file("extdata", package="nanotatoR")
mergedKeyFname = "Sample_index.csv"
RNASeqDir = system.file("extdata", "NA12878_P_Blood_S1.genes.results", package="nanotatoR")
path = system.file("extdata", "Bionano_config/", package = "nanotatoR")
pattern = "_hg19.txt"
outputFilename <- "GM24385_DLE-1_P_trio_hg19_out"
outpath <- system.file("extdata", smapName, package = "nanotatoR")
RZIPpath <- system.file("extdata", "zip.exe", package = "nanotatoR")
nanotatoR_main_Solo_SE(
    smap = smap, bed = bedFile, inputfmt = c("bed"), 
    n=3,
    buildBNInternalDB=TRUE,
    path = path , pattern = pattern, 
    buildSVInternalDB = TRUE,
    EnzymeType = c("SVMerge"),
    labelType = c("SVMerge"),
    SE_path = SE_path, SE_pattern = SE_pattern,
    win_indel_INF = 10000, win_inv_trans_INF = 50000, 
    perc_similarity_INF= 0.5, indelconf = 0.5, invconf = 0.01, 
    transconf = 0.1, 
    hgpath = hgpath, win_indel_DGV = 10000, win_inv_trans_DGV = 50000, 
    perc_similarity_DGV = 0.5,
    RNAseqcombo = TRUE, perc_similarity_INF_parents = 0.9,
    RNASeqDir = RNASeqDir, returnMethod = "dataFrame",
    pattern_Proband = "*_P_*",
    outpath = outpath,
    outputFilename = outputFilename, 
    termListPresent = FALSE,
    InternaldatabasePresent = FALSE,
    primaryGenesPresent = FALSE,
    outputType = c("Excel"))
}
}
